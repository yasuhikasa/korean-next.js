name: Update News

on:
  # 日本時間で8:00, 14:00, 20:00にニュースを更新（現在は手動実行のみ有効）
  # schedule:
  #   - cron: '0 23,5,11 * * *'

  workflow_dispatch: # 手動トリガーを有効化

jobs:
  fetch-news:
    runs-on: ubuntu-latest

    steps:
      # リポジトリのクローン
      - name: Checkout repository
        uses: actions/checkout@v3

      # ニュースデータの取得
      - name: Fetch news data
        env:
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        run: |
          echo "Fetching news data..."
          curl -s "https://newsapi.org/v2/everything?q=korea&apiKey=${NEWS_API_KEY}" > public/news.json
          echo "News data fetched and saved to public/news.json."

      # リモートリポジトリを最新にする
      - name: Pull latest changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Pulling latest changes from origin/main..."
          if ! git pull origin main --rebase; then
            echo "Error: Failed to pull latest changes from origin/main. Check for conflicts."
            exit 1
          fi
          echo "Pull completed successfully."

      # ログ出力: 現在のGitの状態を確認
      - name: Debug git state
        run: |
          echo "Checking Git status..."
          git status
          echo "Checking latest commit..."
          git log -1
          echo "Checking remote URLs..."
          git remote -v

      # 差分がある場合のみコミットとプッシュ
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Adding changes to staging..."
          git add public/news.json
          if ! git diff --cached --quiet; then
            echo "Committing changes..."
            git commit -m "Update news data"
            echo "Pushing changes to origin/main..."
            git push origin main
          else
            echo "No changes to commit. Skipping push."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: fetch-news  # fetch-newsジョブの成功後に実行

    steps:
      # リポジトリのクローン
      - name: Checkout repository
        uses: actions/checkout@v3

      # Herokuへのデプロイ
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Adding Heroku remote..."
          git remote add heroku https://git.heroku.com/your-heroku-app-name.git
          echo "https://heroku:${HEROKU_API_KEY}@git.heroku.com/your-heroku-app-name.git" > ~/.git-credentials
          git config --global credential.helper store
          echo "Pushing to Heroku..."
          git push heroku main
